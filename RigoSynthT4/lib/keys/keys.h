/* algorithms for the generation of the variables

================================== piano_keys_t ==================================

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <conio.h>

char notes[12][4] = {
	"C_", "CS_", "D_", "DS_", "E_", "F_", "FS_", "G_", "GS_", "A_", "AS_", "B_"
};

main(){
	int8_t i, j;

	printf("//  C           C#           D           D#           E           F           F#           G           G#           A           A#           B\n");
	for(i = -2; i <= 8; i++){
		printf("    ");
		for(j = 0; j < 12; j++){
			if(i < 0)
				if( (i*12 + 24 + j) < 10 )
					printf("%sM%d = %d,   ", notes[j], i*-1, i*12 + 24 + j);
				else
					printf("%sM%d = %d,  ", notes[j], i*-1, i*12 + 24 + j);
			else
				if( (i*12 + 24 + j) >= 100 )
					printf("%s%d  = %d, ", notes[j], i, i*12 + 24 + j);
				else
				printf("%s%d  = %d,  ", notes[j], i, i*12 + 24 + j);
		}
		printf("   // C%d ~ B%d\n", i, i);
	}
	getch();
}

================================== key_chars ==================================

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <conio.h>

char notes[12][4] = {
	" C", "C#", " D", "D#", " E", " F", "F#", " G", "G#", " A", "A#", " B"
};

void tab(void){
	printf("");
}

main(){
	int8_t i, j;

	printf("//    C      C#       D      D        E       F      F#       G      G#       A      A#       B\n");
	for(i = -2; i <= 8; i++){
		printf("    ");
		for(j = 0; j < 12; j++){
			if(i < 0)
				printf("\"%s-%d\", ", notes[j], i*-1);
			else
				printf("\"%s%d\",  ", notes[j], i);
		}
		printf("     // C%d ~ B%d\n", i, i);
	}
	getch();
}


*/

#ifndef __KEYS_H
#define __KEYS_H

#include <stdint.h>

#define MAXKEYS	132
#define FIRSTKEY 24

float key_frequencies[MAXKEYS] ={ // 11 octaves of 12 keys
//  C           C#          D           D#          E           F           F#          G           G#          A           A#          B
    0,          0,          0,          0,          0,          0,          0,          0,          0,          0,          0,          0,          // C-2 ~ B-2
    0,          0,          0,          0,          0,          0,          0,          0,          0,          0,          0,          0,          // C-1 ~ B-1
    16.35160,   17.32391,   18.35405,   19.44544,   20.60172,   21.82676,   23.12465,   24.49971,   25.95654,   27.50000,   29.13524,   30.86771,   // C0 ~ B0
    32.70320,   34.64783,   36.70810,   38.89087,   41.20344,   43.65353,   46.24930,   48.99943,   51.91309,   55.00000,   58.27047,   61.73541,   // C1 ~ B1
    65.40639,   69.29566,   73.41619,   77.78175,   82.40689,   87.30706,   92.49861,   97.99886,   103.8262,   110.0000,   116.5409,   123.4708,   // C2 ~ B2
    130.8128,   138.5913,   146.8324,   155.5635,   164.8138,   174.6141,   184.9972,   195.9977,   207.6523,   220.0000,   233.0819,   246.9417,   // C3 ~ B3
    261.6256,   277.1826,   293.6648,   311.1270,   329.6276,   349.2282,   369.9944,   391.9954,   415.3047,   440.0000,   466.1638,   493.8833,   // C4 ~ B4
    523.2511,   554.3653,   587.3295,   622.2540,   659.2551,   698.4565,   739.9888,   783.9909,   830.6094,   880.0000,   932.3275,   987.7666,   // C5 ~ B5
    1046.502,   1108.731,   1174.659,   1244.508,   1318.510,   1396.913,   1479.978,   1567.982,   1661.219,   1760.000,   1864.655,   1975.533,   // C6 ~ B6
    2093.005,   2217.461,   2349.318,   2489.016,   2637.020,   2793.826,   2959.955,   3135.963,   3322.438,   3520.000,   3729.310,   3951.066,   // C7 ~ B7
    4186.009,   4434.922,   4698.636,   4978.032,   5274.041,   5587.652,   5919.911,   6271.927,   6644.875,   7040.000,   7458.620,   7902.133,   // C8 ~ B8
};

char key_chars[MAXKEYS][5] ={ // 11 octaves of 12 keys
//    C      C#       D      D        E       F      F#       G      G#       A      A#       B
    " C-2", "C#-2", " D-2", "D#-2", " E-2", " F-2", "F#-2", " G-2", "G#-2", " A-2", "A#-2", " B-2",      // C-2 ~ B-2
    " C-1", "C#-1", " D-1", "D#-1", " E-1", " F-1", "F#-1", " G-1", "G#-1", " A-1", "A#-1", " B-1",      // C-1 ~ B-1
    " C0",  "C#0",  " D0",  "D#0",  " E0",  " F0",  "F#0",  " G0",  "G#0",  " A0",  "A#0",  " B0",       // C0 ~ B0
    " C1",  "C#1",  " D1",  "D#1",  " E1",  " F1",  "F#1",  " G1",  "G#1",  " A1",  "A#1",  " B1",       // C1 ~ B1
    " C2",  "C#2",  " D2",  "D#2",  " E2",  " F2",  "F#2",  " G2",  "G#2",  " A2",  "A#2",  " B2",       // C2 ~ B2
    " C3",  "C#3",  " D3",  "D#3",  " E3",  " F3",  "F#3",  " G3",  "G#3",  " A3",  "A#3",  " B3",       // C3 ~ B3
    " C4",  "C#4",  " D4",  "D#4",  " E4",  " F4",  "F#4",  " G4",  "G#4",  " A4",  "A#4",  " B4",       // C4 ~ B4
    " C5",  "C#5",  " D5",  "D#5",  " E5",  " F5",  "F#5",  " G5",  "G#5",  " A5",  "A#5",  " B5",       // C5 ~ B5
    " C6",  "C#6",  " D6",  "D#6",  " E6",  " F6",  "F#6",  " G6",  "G#6",  " A6",  "A#6",  " B6",       // C6 ~ B6
    " C7",  "C#7",  " D7",  "D#7",  " E7",  " F7",  "F#7",  " G7",  "G#7",  " A7",  "A#7",  " B7",       // C7 ~ B7
    " C8",  "C#8",  " D8",  "D#8",  " E8",  " F8",  "F#8",  " G8",  "G#8",  " A8",  "A#8",  " B8",       // C8 ~ B8
};

typedef enum {
//  C           C#           D           D#           E           F           F#           G           G#           A           A#           B
    C_M2 = 0,   CS_M2 = 1,   D_M2 = 2,   DS_M2 = 3,   E_M2 = 4,   F_M2 = 5,   FS_M2 = 6,   G_M2 = 7,   GS_M2 = 8,   A_M2 = 9,   AS_M2 = 10,  B_M2 = 11,     // C-2 ~ B-2
    C_M1 = 12,  CS_M1 = 13,  D_M1 = 14,  DS_M1 = 15,  E_M1 = 16,  F_M1 = 17,  FS_M1 = 18,  G_M1 = 19,  GS_M1 = 20,  A_M1 = 21,  AS_M1 = 22,  B_M1 = 23,     // C-1 ~ B-1
    C_0  = 24,  CS_0  = 25,  D_0  = 26,  DS_0  = 27,  E_0  = 28,  F_0  = 29,  FS_0  = 30,  G_0  = 31,  GS_0  = 32,  A_0  = 33,  AS_0  = 34,  B_0  = 35,     // C0 ~ B0
    C_1  = 36,  CS_1  = 37,  D_1  = 38,  DS_1  = 39,  E_1  = 40,  F_1  = 41,  FS_1  = 42,  G_1  = 43,  GS_1  = 44,  A_1  = 45,  AS_1  = 46,  B_1  = 47,     // C1 ~ B1
    C_2  = 48,  CS_2  = 49,  D_2  = 50,  DS_2  = 51,  E_2  = 52,  F_2  = 53,  FS_2  = 54,  G_2  = 55,  GS_2  = 56,  A_2  = 57,  AS_2  = 58,  B_2  = 59,     // C2 ~ B2
    C_3  = 60,  CS_3  = 61,  D_3  = 62,  DS_3  = 63,  E_3  = 64,  F_3  = 65,  FS_3  = 66,  G_3  = 67,  GS_3  = 68,  A_3  = 69,  AS_3  = 70,  B_3  = 71,     // C3 ~ B3
    C_4  = 72,  CS_4  = 73,  D_4  = 74,  DS_4  = 75,  E_4  = 76,  F_4  = 77,  FS_4  = 78,  G_4  = 79,  GS_4  = 80,  A_4  = 81,  AS_4  = 82,  B_4  = 83,     // C4 ~ B4
    C_5  = 84,  CS_5  = 85,  D_5  = 86,  DS_5  = 87,  E_5  = 88,  F_5  = 89,  FS_5  = 90,  G_5  = 91,  GS_5  = 92,  A_5  = 93,  AS_5  = 94,  B_5  = 95,     // C5 ~ B5
    C_6  = 96,  CS_6  = 97,  D_6  = 98,  DS_6  = 99,  E_6  = 100, F_6  = 101, FS_6  = 102, G_6  = 103, GS_6  = 104, A_6  = 105, AS_6  = 106, B_6  = 107,    // C6 ~ B6
    C_7  = 108, CS_7  = 109, D_7  = 110, DS_7  = 111, E_7  = 112, F_7  = 113, FS_7  = 114, G_7  = 115, GS_7  = 116, A_7  = 117, AS_7  = 118, B_7  = 119,    // C7 ~ B7
    C_8  = 120, CS_8  = 121, D_8  = 122, DS_8  = 123, E_8  = 124, F_8  = 125, FS_8  = 126, G_8  = 127, GS_8  = 128, A_8  = 129, AS_8  = 130, B_8  = 131,    // C8 ~ B8
} piano_keys_t;

#endif /* __KEYS_H */